--- 
jobs: 
  - 
    displayName: "Agent job 1"
    job: Job_1
    pool: 
      vmImage: windows-2019
    steps: 
      - 
        checkout: self
      - 
        displayName: "Run PoliCheck \".\\src\""
        inputs: 
          cmdLineArgs: "/F:$(Build.SourcesDirectory)/src /T:9 /Sev:\"1|2\" /PE:2 /O:poli_result_src.xml"
          inputType: CmdLine
        task: PoliCheck@1
      - 
        displayName: "Run PoliCheck \".\\test\""
        inputs: 
          cmdLineArgs: "/F:$(Build.SourcesDirectory)/test /T:9 /Sev:\"1|2\" /PE:2 /O:poli_result_test.xml"
          inputType: CmdLine
        task: PoliCheck@1
      - 
        displayName: "Use NuGet >=5.2.0"
        inputs: 
          checkLatest: true
          versionSpec: ">=5.2.0"
        task: NuGetToolInstaller@1
      - 
        displayName: "Use .NET Core sdk 3.1"
        inputs: 
          version: 3.x
        task: UseDotNet@2
      - 
        displayName: "Use .NET Core sdk 5.x"
        inputs: 
          includePreviewVersions: true
          version: 5.x
        task: UseDotNet@2
      - 
        displayName: "build Microsoft.AspNetCore.OData"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\src\Microsoft.AspNetCore.OData\Microsoft.AspNetCore.OData.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "build Microsoft.AspNetCore.OData.NewtonsoftJson"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\src\Microsoft.AspNetCore.OData.NewtonsoftJson\Microsoft.AspNetCore.OData.NewtonsoftJson.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Build UT(Microsoft.AspNetCore.OData.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.Tests\Microsoft.AspNetCore.OData.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Build UT(Microsoft.AspNetCore.OData.NewtonsoftJson.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.NewtonsoftJson.Tests\Microsoft.AspNetCore.OData.NewtonsoftJson.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Build E2E(Microsoft.AspNetCore.OData.E2E.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.E2E.Tests\Microsoft.AspNetCore.OData.E2E.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Unit Tests (Microsoft.AspNetCore.OData.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-build"
          command: test
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.Tests\Microsoft.AspNetCore.OData.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Unit Tests (Microsoft.AspNetCore.OData.NewtonsoftJson.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-build"
          command: test
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.NewtonsoftJson.Tests\Microsoft.AspNetCore.OData.NewtonsoftJson.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "E2E Tests (Microsoft.AspNetCore.OData.E2E.Tests)"
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-build -l \"console;verbosity=detailed\" --framework netcoreapp3.1"
          command: test
          projects: $(Build.SourcesDirectory)\test\Microsoft.AspNetCore.OData.E2E.Tests\Microsoft.AspNetCore.OData.E2E.Tests.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "build Product(Microsoft.AspNetCore.OData.NewtonsoftJson)"
        enabled: false
        inputs: 
          arguments: "--configuration $(BuildConfiguration) --no-incremental"
          projects: $(Build.SourcesDirectory)\src\Microsoft.AspNetCore.OData.NewtonsoftJson\Microsoft.AspNetCore.OData.NewtonsoftJson.csproj
        task: DotNetCoreCLI@2
      - 
        displayName: "Run CredScan - src"
        inputs: 
          debugMode: false
          folderSuppression: false
          scanFolder: $(Build.SourcesDirectory)\src
          toolMajorVersion: V2
        task: CredScan@2
      - 
        displayName: "Run CredScan - test"
        inputs: 
          debugMode: false
          folderSuppression: false
          scanFolder: $(Build.SourcesDirectory)\test
          toolMajorVersion: V2
        task: CredScan@2
      - 
        displayName: "Run CredScan - tool"
        inputs: 
          debugMode: false
          folderSuppression: false
          scanFolder: $(Build.SourcesDirectory)\tool
          toolMajorVersion: V2
        task: CredScan@2
      - 
        displayName: "Run FxCop - Product Binaries"
        enabled: false
        inputs: 
          inputType: Basic
          targets: $(Build.SourcesDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)\**\Microsoft.AspNetCore.OData.dll
        task: FxCop@2
      - 
        displayName: "Run Roslyn Analyzers"
        enabled: false
        task: RoslynAnalyzers@2
      - 
        displayName: "Run MpCmdRun.exe"
        inputs: 
          EnableServices: true
          FileDirPath: $(Build.SourcesDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)
        task: AntiMalware@3
      - 
        displayName: "Run BinSkim - Product Binaries"
        inputs: 
          AnalyzeEnvironment: true
          AnalyzeHashes: true
          AnalyzeSymPath: $(ProductBinPath)
          AnalyzeTarget: $(ProductBinPath)\**\Microsoft.AspNetCore.OData.dll
          AnalyzeVerbose: true
          InputType: Basic
          arguments: $(ProductBinPath)\**\Microsoft.OData.ModelBuilder.dll
        task: BinSkim@3
      - 
        displayName: "Publish Security Analysis Logs"
        inputs: 
          ArtifactName: SecurityLogs
        task: PublishSecurityAnalysisLogs@2
      - 
        displayName: "Post Analysis"
        inputs: 
          BinSkim: true
          CredScan: true
          PoliCheck: true
          RoslynAnalyzers: true
        task: PostAnalysis@1
      - 
        displayName: "Publish Security Analysis Logs"
        inputs: 
          ArtifactName: SecurityLogs
        task: PublishSecurityAnalysisLogs@2
      - 
        BinSkim: true
        CredScan: true
        FxCop: true
        PoliCheck: true
        displayName: "Post Analysis"
        inputs: ~
        task: PostAnalysis@1
      - 
        displayName: "Run MpCmdRun.exe"
        inputs: 
          EnableServices: true
          FileDirPath: $(Build.SourcesDirectory)\bin\$(BuildPlatform)\$(BuildConfiguration)
        task: AntiMalware@3
      - 
        displayName: "Run BinSkim - Product Binaries"
        inputs: 
          AnalyzeEnvironment: true
          AnalyzeHashes: true
          AnalyzeSymPath: $(ProductBinPath)
          AnalyzeTarget: $(ProductBinPath)\**\Microsoft.AspNetCore.OData.dll
          AnalyzeVerbose: true
          InputType: Basic
          arguments: $(ProductBinPath)\**\Microsoft.OData.ModelBuilder.dll
        task: BinSkim@3
    timeoutInMinutes: 120
  - 
    condition: "and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))"
    jobs: 
      - 
        deployment: CodeSign
        displayName: "Code Signing"
        environment: "Code Sign - Approvals"
        pool: 
          vmImage: windows-latest
        strategy: 
          runOnce: 
            deploy: 
              steps: 
                - 
                  displayName: "Install SignTool tool"
                  inputs: 
                    arguments: "install --tool-path . SignClient"
                    command: custom
                    custom: tool
                  task: DotNetCoreCLI@2
                - 
                  displayName: "Sign packages"
                  pwsh: |
                      .\SignClient "Sign" `
                      --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
                      --input "**/*.nupkg" `
                      --config "$(Pipeline.Workspace)\configs\SignClient.json" `
                      --filelist "$(Pipeline.Workspace)\configs\filelist.txt" `
                      --user "$(SignClientUser)" `
                      --secret "$(SignClientSecret)" `
                      --name "Code Sign packages" `
                      --description "Signing packages" `
                      --descriptionUrl "https://github.com/OData/Extensions"
                - 
                  artifact: SignedPackages
                  displayName: "Publish Signed Packages"
                  publish: $(Pipeline.Workspace)/BuildPackages
        variables: 
          - 
            group: "Code Signing"
    stage: CodeSign
resources: 
  repositories: 
    - 
      ref: master
      repository: self
      type: git
trigger: 
  branches: 
    include: 
      - master
